{"ast":null,"code":"import _asyncToGenerator from \"/Users/delaneyschultz/Desktop/untitled folder 6/hw4final/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed } from '@angular/core/testing';\nimport { IndexComponent } from './index.component';\ndescribe('AuthComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [IndexComponent]\n    }).compileComponents();\n  }));\n\n  function updateForm(userEmail, userPassword) {\n    component.logForm.controls['username'].setValue(userEmail);\n    component.logForm.controls['password'].setValue(userPassword);\n  }\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(IndexComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should log in a previously registered user', () => {\n    updateForm(\"Bret\", \"Kulas Light\");\n    fixture.detectChanges();\n    expect(component.logForm.valid).toBeTruthy();\n  });\n  it('should not log in an invalid user', () => {\n    updateForm(\"Bret\", \"invalid password\");\n    fixture.detectChanges();\n    const errorMsg = fixture.debugElement.nativeElement.querySelector('#password-error-msg');\n    expect(errorMsg).toBeDefined();\n    expect(errorMsg.innerHTML).toContain('Password is not correct.');\n  });\n});","map":{"version":3,"sources":["/Users/delaneyschultz/Desktop/untitled folder 6/hw4final/src/app/auth/index.component.spec.ts"],"names":["TestBed","IndexComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","compileComponents","updateForm","userEmail","userPassword","logForm","controls","setValue","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","valid","errorMsg","debugElement","nativeElement","querySelector","toBeDefined","innerHTML","toContain"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC5B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAML,OAAO,CAACM,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACN,cAAD;AADmB,KAA/B,EAGDO,iBAHC,EAAN;AAIH,GALS,EAAV;;AAMA,WAASC,UAAT,CAAoBC,SAApB,EAA+BC,YAA/B,EAA6C;AACzCR,IAAAA,SAAS,CAACS,OAAV,CAAkBC,QAAlB,CAA2B,UAA3B,EAAuCC,QAAvC,CAAgDJ,SAAhD;AACAP,IAAAA,SAAS,CAACS,OAAV,CAAkBC,QAAlB,CAA2B,UAA3B,EAAuCC,QAAvC,CAAgDH,YAAhD;AACH;;AACDN,EAAAA,UAAU,CAAC,MAAM;AACbD,IAAAA,OAAO,GAAGJ,OAAO,CAACe,eAAR,CAAwBd,cAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACY,iBAApB;AACAZ,IAAAA,OAAO,CAACa,aAAR;AACH,GAJS,CAAV;AAKAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAAChB,SAAD,CAAN,CAAkBiB,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,4CAAD,EAA+C,MAAM;AACnDT,IAAAA,UAAU,CAAC,MAAD,EAAS,aAAT,CAAV;AACAL,IAAAA,OAAO,CAACa,aAAR;AACAE,IAAAA,MAAM,CAAChB,SAAS,CAACS,OAAV,CAAkBS,KAAnB,CAAN,CAAgCD,UAAhC;AACH,GAJC,CAAF;AAKAF,EAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC1CT,IAAAA,UAAU,CAAC,MAAD,EAAS,kBAAT,CAAV;AACAL,IAAAA,OAAO,CAACa,aAAR;AACA,UAAMK,QAAQ,GAAGlB,OAAO,CAACmB,YAAR,CAAqBC,aAArB,CAAmCC,aAAnC,CAAiD,qBAAjD,CAAjB;AACAN,IAAAA,MAAM,CAACG,QAAD,CAAN,CAAiBI,WAAjB;AACAP,IAAAA,MAAM,CAACG,QAAQ,CAACK,SAAV,CAAN,CAA2BC,SAA3B,CAAqC,0BAArC;AACH,GANC,CAAF;AAOH,CAjCO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { IndexComponent } from './index.component';\ndescribe('AuthComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [IndexComponent]\n        })\n            .compileComponents();\n    });\n    function updateForm(userEmail, userPassword) {\n        component.logForm.controls['username'].setValue(userEmail);\n        component.logForm.controls['password'].setValue(userPassword);\n    }\n    beforeEach(() => {\n        fixture = TestBed.createComponent(IndexComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should log in a previously registered user', () => {\n        updateForm(\"Bret\", \"Kulas Light\");\n        fixture.detectChanges();\n        expect(component.logForm.valid).toBeTruthy();\n    });\n    it('should not log in an invalid user', () => {\n        updateForm(\"Bret\", \"invalid password\");\n        fixture.detectChanges();\n        const errorMsg = fixture.debugElement.nativeElement.querySelector('#password-error-msg');\n        expect(errorMsg).toBeDefined();\n        expect(errorMsg.innerHTML).toContain('Password is not correct.');\n    });\n});\n"]},"metadata":{},"sourceType":"module"}